-> USER AUTHENTICATION :-

@app.route('/')
def home():
    return render_template_string(welcome_template)

@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']

        if username in users_db and check_password_hash(users_db[username]['password'], password):
            session['username'] = username
            return redirect(url_for('dashboard'))
        return "Invalid username or password"
    return render_template_string(login_template)

@app.route('/register', methods=['GET', 'POST'])
def register():
    if request.method == 'POST':
        username = request.form['username']
        email = request.form['email']
        password = request.form['password']

        if username in users_db:
            return "Username already exists"

        hashed_password = generate_password_hash(password)
        users_db[username] = {'email': email, 'password': hashed_password}
        return redirect(url_for('login'))
    return render_template_string(registration_template)

@app.route('/logout')
def logout():
    session.pop('username', None)
    return redirect(url_for('home'))

@app.route('/dashboard')
def dashboard():
    return render_template_string(dashboard_template)

-> EXPENSE AND BILL MANAGEMENT :-
expenses_db = []
bills_db = []
groups_db = {}  # {group_name: [member_usernames]}

@app.route('/add_expense', methods=['GET', 'POST'])
def add_expense():
    if 'username' not in session:
        return redirect(url_for('login'))

    if request.method == 'POST':
        amount = float(request.form['amount'])
        group_name = request.form['group_name']
        description = request.form['description']
        split_type = request.form['split_type']

        if group_name not in groups_db:
            return "Group not found", 404

        participants = groups_db[group_name]
        expense_id = len(expenses_db) + 1
        expense = {
            "id": expense_id,
            "amount": amount,
            "description": description,
            "paid_by": session['username'],
            "group_name": group_name,
            "participants": participants,
            "split_type": split_type,
            "timestamp": datetime.now()
        }
        expenses_db.append(expense)

        # Create bills for each participant
        amount_per_person = amount / len(participants)
        for participant in participants:
            if participant != session['username']:
                bill = {
                    "id": len(bills_db) + 1,
                    "expense_id": expense_id,
                    "group_name": group_name,
                    "description": description,
                    "amount_due": amount_per_person,
                    "paid_by": session['username'],
                    "owed_by": participant,
                    "is_paid": False
                }
                bills_db.append(bill)

        return redirect(url_for('view_group', group_name=group_name))

    return render_template_string(add_expense_template,
                                username=session['username'],
                                groups=groups_db)

@app.route('/profile', methods=['GET', 'POST'])
def profile():
    if 'username' not in session:
        return redirect(url_for('login'))

    if request.method == 'POST':
        email = request.form['email']
        phone = request.form['phone']
        users_db[session['username']].update({
            'email': email,
            'phone': phone
        })
        return redirect(url_for('profile'))

    user_data = users_db[session['username']]
    return render_template_string(profile_template,
                                username=session['username'],
                                email=user_data.get('email', ''),
                                phone=user_data.get('phone', ''))

@app.route('/past_expenses')
def past_expenses():
    if 'username' not in session:
        return redirect(url_for('login'))
    user_expenses = [exp for exp in expenses_db if session['username'] in exp['participants']]
    return render_template_string(past_expenses_template, past_expenses=user_expenses)

@app.route('/pending_bills')
def pending_bills():
    if 'username' not in session:
        return redirect(url_for('login'))
    # Get bills where current user is either the payer or owes money
    relevant_bills = [
        bill for bill in bills_db
        if bill['paid_by'] == session['username'] or bill['owed_by'] == session['username']
    ]
    return render_template_string(pending_bills_template, bills=relevant_bills)

@app.route('/update_bills', methods=['POST'])
def update_bills():
    if 'username' not in session:
        return redirect(url_for('login'))
   
    paid_bills = request.form.getlist('paid_bills')
    for bill_id in paid_bills:
        for bill in bills_db:
            if str(bill['id']) == bill_id and bill['paid_by'] == session['username']:
                bill['is_paid'] = True
   
    return redirect(url_for('pending_bills'))


-> GROUP MANEGEMENT :-

@app.route('/create_group', methods=['GET', 'POST'])
def create_group():
    if 'username' not in session:
        return redirect(url_for('login'))

    if request.method == 'POST':
        group_name = request.form['group_name']
        members = request.form.getlist('members')
        members.append(session['username'])  # Add creator to the group
        groups_db[group_name] = list(set(members))  # Remove duplicates
        return redirect(url_for('view_groups'))

    return render_template_string(create_group_template, users_db=users_db)

@app.route('/view_groups')
def view_groups():
    if 'username' not in session:
        return redirect(url_for('login'))

    user_groups = {
        name: members
        for name, members in groups_db.items()
        if session['username'] in members
    }
    return render_template_string(view_groups_template, user_groups=user_groups)

group_expenses_template = """
